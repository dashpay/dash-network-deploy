#jinja2: lstrip_blocks: True
{
  "configFormatVersion": "{{ dashmate_config_version }}",
  "defaultConfigName": "{{ dash_network_name}}",
  "defaultGroupName": null,
  "configs": {
    "{{ dash_network_name }}": {
      "description": "node with {{ dash_network_name }} configuration",
      "group": null,
      "docker": {
        "network": {
          "subnet": "172.25.24.0/24"
        },
        "baseImage": {
          "build": {
            "enabled": false,
            "context": null,
            "dockerFile": null,
            "target": null
          }
        }
      },
      "core": {
        "insight": {
          "enabled": false,
          "ui": {
            "enabled": false,
            "docker": {
              "image": "{{ insight_image }}"
            }
          },
          "docker": {
            "image": "{{ insight_api_image }}"
          },
          "port": 3001
        },
        "docker": {
          "image": "{{ dashd_nightly_image if 'nightly_masternodes' in group_names else dashd_image }}",
          "commandArgs": []
        },
        "p2p": {
          "host": "0.0.0.0",
          "port": {{ dashd_port }},
          "seeds": [
            {%- for seed in template_bootstrap_peers +%}
            {
              "host": "{{ hostvars[seed].public_ip }}",
              "port": {{ dashd_port }}
            }{% if not loop.last %},{% endif %}
            {% endfor +%}
          ]
        },
        "rpc": {
          "host": "127.0.0.1",
          "port": {{ dashd_rpc_port }},
          "user": "{{ dashd_rpc_user }}",
          "password": "{{ dashd_rpc_password }}",
          "allowIps": [
            "{{ private_ip | ansible.utils.ipsubnet(16) }}",
            "127.0.0.0",
            "172.16.0.0/12",
            "192.168.0.0/16",
            "{{ hostvars['vpn'].public_ip }}/32"
          ]
        },
        "spork": {
          "address": {% if dashd_sporkaddr is defined %}"{{ dashd_sporkaddr }}"{% else %}null{% endif %},
          "privateKey": {% if dashd_sporkkey is defined %}"{{ dashd_sporkkey }}"{% else %}null{% endif +%}
        },
        "masternode": {
          "enable": {% if node is defined and node['operator'] is defined  %}true{% else %}false{% endif %},
          "operator": {
            "privateKey": {% if node is defined and node['operator'] is defined %}"{{ node.operator.private_key }}"{% else %}null{% endif +%}
          }
        },
        "miner": {
          "enable": false,
          "interval": "2.5m",
          "mediantime": null,
          "address": null
        },
        "devnet": {
          "name": {% if dash_network == 'devnet' %}"{{ dash_devnet_name }}"{% else %}null{% endif %},
          "minimumDifficultyBlocks": {{ dashd_minimumdifficultyblocks }},
          "powTargetSpacing": {{ dashd_powtargetspacing }}
        },
        "logIps": 0,
        "indexes": true,
        "log": {
          "file": {
            "categories": [
              {%- if dashd_debug == 1 %}

              "all"
            {%+ endif %}],
            "path": "{{ dashmate_logs_dir }}/core.log"
          }
        }
      },
      "platform": {
        "enable": {% if dashmate_platform_enable %}true{% else %}false{% endif %},
        "dapi": {
          "envoy": {
            "docker": {
              "image": "{{ dapi_envoy_image }}"
            },
            "http": {
              "host": "0.0.0.0",
              "port": {{ dapi_port }},
              "connectTimeout": "{{ dashmate_platform_dapi_envoy_http_connect_timeout }}",
              "responseTimeout": "{{ dashmate_platform_dapi_envoy_http_response_timeout }}"
            },
            "rateLimiter": {
              "maxTokens": 300,
              "tokensPerFill": 150,
              "fillInterval": "60s",
              "enabled": {% if dashmate_platform_dapi_envoy_rate_limiter_enabled %}true{% else %}false{% endif %}
            },
            "ssl": {
              "enabled": true,
              "provider": "{{ dashmate_platform_dapi_envoy_ssl_provider }}",
              "providerConfigs": {
                "zerossl": {
                  "apiKey": {% if dashmate_platform_dapi_envoy_ssl_provider_config_zerossl_api_key is not none and dashmate_platform_dapi_envoy_ssl_provider_config_zerossl_api_key != '' %}"{{ dashmate_platform_dapi_envoy_ssl_provider_config_zerossl_api_key }}"{% else %}null{% endif %},
                  "id": {% if dashmate_zerossl_config_certificate_id is defined %}"{{ dashmate_zerossl_config_certificate_id }}"{% else %}null{% endif +%}
                }
              }
            }
          },
          "api": {
            "docker": {
              "image": "{{ dapi_image }}",
              "deploy": {
                "replicas": {{ dashmate_platform_dapi_api_docker_deploy_replicas }}
              },
              "build": {
                "enabled": false,
                "context": "{{ dashmate_source_dir }}",
                "dockerFile": "{{ dashmate_source_dir }}/packages/dapi/Dockerfile",
                "target": ""
              }
            }
          }
        },
        "drive": {
          "abci": {
            "docker": {
              "image": "{{ drive_image }}",
              "build": {
                "enabled": false,
                "context": "{{ dashmate_source_dir }}",
                "dockerFile": "{{ dashmate_source_dir }}/packages/js-drive/Dockerfile",
                "target": ""
              }
            },
            "logs": {
              "stdout": {
                "destination": "stdout",
                "format": "pretty",
                "level": "{{ drive_log_stdout_level }}",
                "color": true
              },
              "prettyFile": {
                "destination": "{{ dashmate_logs_dir }}/drive-pretty.log",
                "level": "{{ drive_log_pretty_file_level }}",
                "format": "pretty",
                "color": false
              },
              "jsonFile": {
                "destination": "{{ dashmate_logs_dir }}/drive-json.log",
                "level": "{{ drive_log_json_file_level }}",
                "format": "json",
                "color": null
              }{% if drive_log_grovedb_operations %},
              "groveDbOperationsFile": {
                "destination": "{{ dashmate_logs_dir }}/drive-grovedb-operations.log",
                "level": "tenderdash_abci=error,drive_grovedb_operations=trace",
                "format": "json",
                "color": null
              }{% endif %}
            },
            "validatorSet": {
              "llmqType": {{ platform_drive_validator_set_llmq_type }}
            },
            "chainLock": {
              "llmqType": 101,
              "llmqSize": 12,
              "dkgInterval": 24
            },
            "epochTime": {{ platform_drive_abci_epoch_time }}
          },
          "tenderdash": {
            "mode": "validator",
            "docker": {
              "image": "{{ tendermint_image }}"
            },
            "p2p": {
              "host": "0.0.0.0",
              "port": {{ tendermint_p2p_port }},
              "persistentPeers": [],
              "seeds": [
                {%- for seed in template_bootstrap_peers +%}
                {
                  "id": "{{ seed_nodes[seed].node_key.id }}",
                  "host": "{{ hostvars[seed].public_ip }}",
                  "port": {{ tendermint_p2p_port }}
                }{% if not loop.last %},{% endif %}
                {% endfor +%}
              ],
              "flushThrottleTimeout": "{{dashmate_platform_drive_tenderdash_p2p_flush_throttle_timeout}}",
              "maxPacketMsgPayloadSize": {{dashmate_platform_drive_tenderdash_p2p_max_packet_msg_payload_size}},
              "sendRate": {{dashmate_platform_drive_tenderdash_p2p_send_rate}},
              "recvRate": {{dashmate_platform_drive_tenderdash_p2p_recv_rate}}
            },
            "mempool": {
              "size": {{dashmate_platform_drive_tenderdash_mempool_size}},
              "maxTxsBytes": {{dashmate_platform_drive_tenderdash_mempool_max_txs_bytes}}
            },
            "rpc": {
              "host": "127.0.0.1",
              "port": {{ tendermint_rpc_port }},
              "maxOpenConnections": {{dashmate_platform_drive_tenderdash_rpc_max_open_connections}}
            },
            "pprof": {
              "enabled": {% if dashmate_platform_tenderdash_pprof_enable %}true{% else %}false{% endif %},
              "port": 6060
            },
            "metrics": {
              "enabled": true,
              "host": "{{ private_ip }}",
              "port": 36660
            },
            "consensus": {
              "createEmptyBlocks": true,
              "createEmptyBlocksInterval": "3m",
              "peer": {
                "gossipSleepDuration": "{{dashmate_platform_drive_tenderdash_consensus_peer_gossip_sleep_duration}}",
                "queryMaj23SleepDuration": "{{dashmate_platform_drive_tenderdash_consensus_peer_query_maj23_sleep_duration}}"
              },
              "unsafeOverride": {
                "propose": {
                  "timeout": {% if dashmate_platform_drive_tenderdash_consensus_unsafe_override_propose_timeout is not none %}"{{dashmate_platform_drive_tenderdash_consensus_unsafe_override_propose_timeout}}"{% else %}null{% endif %},
                  "delta": {% if dashmate_platform_drive_tenderdash_consensus_unsafe_override_propose_delta is not none %}"{{dashmate_platform_drive_tenderdash_consensus_unsafe_override_propose_delta}}"{% else %}null{% endif %}
                },
                "vote": {
                  "timeout": {% if dashmate_platform_drive_tenderdash_consensus_unsafe_override_vote_timeout is not none %}"{{dashmate_platform_drive_tenderdash_consensus_unsafe_override_vote_timeout}}"{% else %}null{% endif %},
                  "delta": {% if dashmate_platform_drive_tenderdash_consensus_unsafe_override_vote_delta is not none %}"{{dashmate_platform_drive_tenderdash_consensus_unsafe_override_vote_delta}}"{% else %}null{% endif %}
                },
                "commit": {
                  "timeout": null,
                  "bypass": null
                }
              }
            },
            "log": {
              "level": "{{ tenderdash_log_level }}",
              "format": "json",
              "path": "{{ dashmate_logs_dir }}/tenderdash.log"
            },
            "moniker": "{{ inventory_hostname }}",
            "node": {
              "id": "{{ node.node_key.id }}",
              "key": "{{ node.node_key.private_key }}"
            },
            "genesis": {
              "genesis_time": "{{ genesis_time }}",
              "chain_id": "dash-{{ ( 'devnet-' + dash_devnet_name if dash_network == 'devnet' else dash_network ) if tenderdash_chain_id is not defined else tenderdash_chain_id }}",
              {%+ if platform_initial_core_chain_locked_height is defined and platform_initial_core_chain_locked_height != "" %}"initial_core_chain_locked_height": {{ platform_initial_core_chain_locked_height | int }},
              {% endif %}
              "consensus_params": {
                "timeout": {
                  "propose": "30000000000",
                  "propose_delta": "1000000000",
                  "vote": "2000000000",
                  "vote_delta": "500000000",
                  "commit": "1000000000",
                  "bypass_commit_timeout": false
                },
                "block": {
                  "max_bytes": "2097152",
                  "max_gas": "57631392000",
                  "time_iota_ms": "5000"
                },
                "evidence": {
                  "max_bytes": "512000",
                  "max_age": "100000",
                  "max_age_num_blocks": "100000",
                  "max_age_duration": "172800000000000"
                },
                "synchrony": {
                  "message_delay": "32000000000",
                  "precision": "500000000"
                },
                "validator": {
                  "pub_key_types": [
                    "bls12381"
                  ]
                },
                "abci": {
                  "recheck_tx": true
                },
                "version": {
                  "app_version": "1"
                }
              },
              "validator_quorum_type": {{ platform_drive_validator_set_llmq_type }}
            }
          }
        },
        "dpns": {
          "contract": {
            "id": "GWRSAVFMjXx8HpQFaNJMqBV7MBgMK4br5UESsB4S31Ec"
          },
          "ownerId": "4EfA9Jrvv3nnCFdSf7fad59851iiTRZ6Wcu6YVJ4iSeF",
          "masterPublicKey": "{{ dpns_hd_master_public_key }}",
          "secondPublicKey": "{{ dpns_hd_second_public_key }}"
        },
        "dashpay": {
          "contract": {
            "id": "Bwr4WHCPz5rFVAD87RqTs3izo4zpzwsEdKPWUT1NS1C7"
          },
          "masterPublicKey": "{{ dashpay_hd_master_public_key }}",
          "secondPublicKey": "{{ dashpay_hd_second_public_key }}"
        },
        "featureFlags": {
          "contract": {
            "id": "HY1keaRK5bcDmujNCQq5pxNyvAiHHpoHQgLN5ppiu4kh"
          },
          "ownerId": "H9sjb2bHG8t7gq5SwNdqzMWG7KR6sf3CbziFzthCkDD6",
          "masterPublicKey": "{{ feature_flags_hd_master_public_key }}",
          "secondPublicKey": "{{ feature_flags_hd_second_public_key }}"
        },
        "masternodeRewardShares": {
          "contract": {
            "id": "rUnsWrFu3PKyRMGk2mxmZVBPbQuZx2qtHeFjURoQevX"
          },
          "masterPublicKey": "{{ mn_reward_shares_hd_master_public_key }}",
          "secondPublicKey": "{{ mn_reward_shares_hd_second_public_key }}"
        },
        "sourcePath": null,
        "withdrawals": {
          "contract": {
            "id": "4fJLR2GYTPFdomuTVvNy3VRrvWgvkKPzqehEBpNf2nk6"
          },
          "masterPublicKey": "{{ withdrawals_hd_master_public_key }}",
          "secondPublicKey": "{{ withdrawals_hd_second_public_key }}"
        }
      },
      "dashmate": {
        "helper": {
          "docker": {
            "build": {
              "enabled": false,
              "context": "{{ dashmate_source_dir }}",
              "dockerFile": "{{ dashmate_source_dir }}/Dockerfile",
              "target": ""
            }
          },
          "api": {
            "enable": true,
            "port": {{ dashmate_api_port }}
          }
        }
      },
      "externalIp": "{{ public_ip }}",
      "network": "{{ dash_network }}",
      "environment": "{{ node_environment }}"
    }
  }
}
