---

- name: Increase VM max map count to ES minimum
  ansible.posix.sysctl:
    name: vm.max_map_count
    value: 262144
    state: present

- name: Create elastic services and certs dirs
  ansible.builtin.file:
    path: '{{ certs_path }}/{{ inventory_hostname }}'
    state: directory
    recurse: true

- name: Partition and format data volume
  ansible.builtin.import_tasks: volume.yml

- name: Generate certificates on first logs node
  ansible.builtin.import_tasks: generate_certs.yml
  run_once: true
  delegate_to: '{{ play_hosts | first }}'

- name: Create temp dir and set permissions
  delegate_to: localhost
  become: false
  ansible.builtin.file:
    path: '~/tmp/ansible/{{ dash_network_name }}'
    state: directory
    mode: "0777"

- name: Fetch generated ca
  run_once: true
  ansible.builtin.fetch:
    src: '{{ bundle_path }}/ca.zip'
    dest: '~/tmp/ansible/{{ dash_network_name }}/'
    flat: true

- name: Fetch generated certs
  run_once: true
  ansible.builtin.fetch:
    src: '{{ bundle_path }}/certs.zip'
    dest: '~/tmp/ansible/{{ dash_network_name }}/'
    flat: true

- name: Install CA
  ansible.builtin.unarchive:
    src: '~/tmp/ansible/{{ dash_network_name }}/ca.zip'
    dest: '{{ certs_path }}'

- name: Install certs
  ansible.builtin.unarchive:
    src: ~/tmp/ansible/{{ dash_network_name }}/certs.zip
    dest: '{{ certs_path }}'

- name: Copy files
  vars:
    template_seeds: "{{ groups.logs_nodes | reject('equalto', inventory_hostname) }}"
  ansible.builtin.template:
    src: '{{ item }}.j2'
    dest: '{{ elastic_path }}/{{ item }}'
    mode: "0644"
  loop:
    - docker-compose.yml
    - elasticsearch.yml
    - kibana.yml

- name: Start elastic
  community.docker.docker_compose:
    project_src: '{{ elastic_path }}'
    state: present
    pull: true
    restarted: true
    services:
      - elasticsearch

- name: Wait for Elasticsearch to be available
  ansible.builtin.uri:
    url: http://localhost:9200
    user: '{{ elastic_username }}'
    password: '{{ elastic_password }}'
  register: response
  until: response.status == 200
  retries: 10
  delay: 10

- name: Set kibana_system password
  run_once: true
  ansible.builtin.uri:
    url: http://localhost:9200/_security/user/kibana_system/_password
    user: '{{ elastic_username }}'
    password: '{{ elastic_password }}'
    ca_path: '{{ certs_path }}/ca/ca.crt'
    method: POST
    body_format: json
    body:
      password: '{{ kibana_password }}'

- name: Start kibana
  community.docker.docker_compose:
    project_src: '{{ elastic_path }}'
    state: present
    pull: true
    restarted: true
    services:
      - kibana

- name: Wait for Kibana to be available
  ansible.builtin.uri:
    url: http://localhost:5601/api/status
    user: "{{ elastic_username }}"
    password: "{{ elastic_password }}"
    force_basic_auth: true
  register: response
  until: response.status == 200 and response.json.status.overall.level == "available"
  retries: 10
  delay: 10

- name: Configure Elasticsearch and Kibana
  ansible.builtin.import_tasks: configure_cluster.yml
  run_once: true
  delegate_to: '{{ play_hosts | first }}'


- name: Upload and apply Tenderdash log parsing pipeline
  ansible.builtin.uri:
    url: "{{ elasticsearch_url }}/logstash/_pipeline/process_proposal_pipeline"
    method: PUT
    body: "{{ lookup('file', 'files/pipelines/process_proposal_pipeline.json') }}"
    body_format: json
    user: "{{ elastic_username }}"
    password: "{{ elastic_password }}"
  when: inventory_hostname in groups['elasticsearch']

- name: Create Elasticsearch Watches
  ansible.builtin.uri:
    url: "{{ elasticsearch_url }}/_watcher/watch/{{ item.name }}"
    method: PUT
    body: "{{ lookup('file', item.file) }}"
    body_format: json
    user: "{{ elastic_username }}"
    password: "{{ elastic_password }}"
  loop:
    - { name: 'error_logs_watch', file: 'files/watches/error_logs_watch.json' }
    - { name: 'high_round_watch', file: 'files/watches/high_round_watch.json' }
    - { name: 'no_logs_watch', file: 'files/watches/no_logs_watch.json' }
  loop_control:
    label: "{{ item.name }}"
  when: inventory_hostname in groups['elasticsearch']
